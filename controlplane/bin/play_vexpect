#!/usr/bin/env python
import argparse
import json
import logging
import numpy as np
import os
import six
import sys
import threading
import time
import traceback

import gym
import universe
from universe import envs, spaces, wrappers
import gym_controlplane
from gym_controlplane import error, integration

gym_controlplane.logger_setup('play_vexpect')
logger = logging.getLogger()

class UserInput(threading.Thread):
    daemon = True

    def __init__(self, vexpect):
       super(UserInput, self).__init__()
       self.vexpect = vexpect

    def run(self):
        try:
            self.do_run()
        except Exception as e:
            logger.error('Caught error in UserInput thread: %s', e)

    def do_run(self):
        self.start_time = time.time()

        while True:
            try:
                if six.PY2:
                    global input
                    input = raw_input
                input_command = input("""[UserInput] Input commands:
  d [debug show]
  i [ipdb session]
  c [show score crop]
""").strip()
            except EOFError:
                # True when stdin isn't open
                return
            split = input_command.split(' ')
            command, args = split[0], split[1:]

            try:
                if command == 'i':
                    self.vexpect.flag_ipdb()
                elif command == 'd':
                    self.vexpect.flag_debug_show()
                elif command == 'c':
                    self.vexpect.flag_show_score_crop()
            except Exception as e:
                if six.PY2:
                    logger.error('[UserInput] Error processing command: %s', traceback.format_exc(e))
                else:
                    logger.error('[UserInput] Error processing command: %s', '\n'.join(traceback.format_exception(type(e), e, e.__traceback__)))

    def trigger_ipdb(self):
        self.vexpect._trigger_ipdb()

def main():
    universe.configure_logging(path=False)

    parser = argparse.ArgumentParser(description=None)
    parser.add_argument('-v', '--verbose', action='count', dest='verbosity', default=0, help='Set verbosity.')
    parser.add_argument('-r', '--remotes', default='vnc://127.0.0.1:5900', help='Which VNC address to connect to.')
    parser.add_argument('-d', '--non-interactive', action='store_true', help='Do not run the userinput thread.')
    parser.add_argument('-g', '--gameover', action='store_true', help='Wait for gameover.')
    parser.add_argument('-s', '--screenshot', action='store_true', help='Just take screenshot.')
    parser.add_argument('-m', '--monitor', action='store_true', help='Monitor the state.')
    parser.add_argument('-i', '--initial-states', help='Initial states.')
    parser.add_argument('-e', '--env-id', help='ID of the environment.')
    parser.add_argument('-R', '--reset', action='store_true', help='Just reset the env.')
    args = parser.parse_args()

    if args.verbosity == 0:
        logger.setLevel(logging.INFO)
    elif args.verbosity >= 1:
        logger.setLevel(logging.DEBUG)

    if args.env_id:
        env_id = args.env_id
    else:
        # parser.error('You must provide "-e ENV_ID"')
        dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../out/demo'))
        env_id_path = os.path.join(dir, 'env_id.txt')
        env_id = None
        if os.path.exists(env_id_path):
            with open(env_id_path) as f:
                env_id = f.read().strip()
        if not env_id:
            parser.error('No -e provided, and {}/env_id.txt does not contain an env_id'.format(env_id_path))
        logger.info('Using env_id of %s', env_id)

    controlplane_spec = gym_controlplane.spec(id=env_id)
    env_id = controlplane_spec.id

    if args.reset:
        env = gym.make(controlplane_spec.id)
        env.configure(remotes=args.remotes, observer=True)
        env.reset()
        env = wrappers.Unvectorize(env)

        # Hack to block until reset completes
        screen = None
        while screen is None:
            screen, _, _, _ = env.step([])
        return 0

    src_dir = controlplane_spec.vexpect_path

    env = wrappers.Unvectorize(wrappers.Vision(envs.VNCEnv()))
    if not args.gameover:
        remotes = args.remotes.split('+')[0]
    else:
        remotes = args.remotes
    env.configure(
        remotes=args.remotes,
        ignore_clock_skew=True,
        disable_action_probes=True,
        vnc_driver='go',
        vnc_kwargs={'encoding': 'zrle', 'compress_level': 0},
        observer=True,
    )

    screen = None
    while screen is None:
        screen, _, _, _ = env.step([])
        # Good enough for now.
        time.sleep(1/60.0)

    # Runs in main thread
    start = time.time()
    if args.screenshot:
        # HACK!
        time.sleep(1)

        while True:
            screen, _, _, _ = env.step([])

            def show(x=0, width=screen.shape[1], y=0, height=screen.shape[0]):
                from PIL import Image
                Image.fromarray(screen[y:y+height, x:x+width]).show()
            def save():
                # TODO: this should really live somewhere else
                from PIL import Image
                i = 0
                while True:
                    name = 'screenshot{}.png'.format(i)
                    path = os.path.join(src_dir, name)
                    if os.path.exists(path):
                        i += 1
                    else:
                        break
                logger.info('Saving screenshot to %s', path)
                Image.fromarray(screen).save(path)

            import ipdb; ipdb.set_trace()
        return 0

    vexpect = integration.VExpect.load(src_dir)
    if not args.non_interactive:
        # Kick off thread
        user_input = UserInput(vexpect)
        user_input.start()

    if args.monitor:
        # TODO: move this inside
        if args.initial_states:
            states = args.initial_states.split(',')
            states = [vexpect.states[s] for s in states]
        else:
            states = list(vexpect.states.values())

        states.sort(key=lambda state: state.state_name)

        # HACK!
        time.sleep(1)

        vexpect.run_match(env, states)

        return 0
    elif args.gameover:
        reward_parser = controlplane_spec.build_reward_parser()
        # Just for debugging, really
        vexpect.run_gameover(env, reward_parser=reward_parser)
    else:
        if args.initial_states: initial_states = args.initial_states.split(',')
        else: initial_states = None

        try:
            vexpect.run_initialize(env, initial_states=initial_states)
        except error.VExpectTimeout as e:
            logger.error('Handled error.VExpectTimeout: %s (runtime: %fs)', e, time.time() - start)
            return 10
    logger.info('vexpect macro complete in %fs', time.time() - start)

    return 0

if __name__ == '__main__':
    sys.exit(main())
